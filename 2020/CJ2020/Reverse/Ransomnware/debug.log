# stack 
[91, 198, 14, 176, 23, 7, 141, 86, 193, 1, 109, 94, 201, 53, 29, 104, 205, 135, 223, 46, 202, 90, 27, 93, 236, 113, 78, 120, 243, 96, 88, 190, 150, 122, 21, 44, 83, 105, 138, 199, 187, 157, 114, 149, 162, 197, 32, 5, 147, 100, 174, 156, 71, 3, 102, 215, 12, 30, 60, 145, 247, 214, 226, 112, 101, 130, 211, 55, 103, 25, 133, 224, 250, 26, 59, 57, 15, 54, 75, 35, 246, 239, 110, 115, 132, 158, 37, 81, 208, 82, 20, 92, 136, 69, 165, 49, 98, 40, 210, 178, 231, 185, 126, 70, 154, 167, 97, 131, 238, 230, 142, 164, 74, 181, 129, 194, 168, 124, 233, 89, 22, 245, 212, 77, 151, 45, 179, 216, 152, 161, 188, 36, 221, 169, 182, 38, 11, 43, 189, 4, 244, 240, 227, 58, 254, 209, 99, 146, 47, 134, 76, 251, 116, 139, 111, 218, 225, 84, 13, 237, 31, 28, 200, 18, 232, 252, 85, 235, 17, 128, 196, 137, 63, 140, 171, 33, 172, 170, 166, 65, 249, 10, 68, 95, 253, 56, 42, 155, 64, 106, 62, 204, 222, 177, 125, 48, 173, 220, 219, 118, 234, 16, 117, 143, 2, 39, 183, 207, 67, 159, 255, 144, 191, 24, 163, 87, 184, 160, 41, 119, 175, 148, 8, 34, 121, 50, 108, 19, 213, 0, 52, 107, 61, 66, 248, 51, 242, 203, 186, 73, 9, 229, 192, 195, 72, 79, 80, 228, 180, 153, 6, 127, 217, 206, 241, 123]

```
v6 = []
a1, a2 = 0, 0
for i in range(32):
	a1 = (a1 + 1) % 256
	a2 = (a2 + s[a1]) % 256
	# switch_pos
	v3 = s[a1]
	s[a1] = s[a2]
	s[a2] = v3
	v6.append(s[s[a1] + s[a2]])
>>> v6

# fixed value get from debugging
v6 = [0x1c, 0x27, 0xf0, 0xe5, 0xcf, 0x63, 0x7b, 0xc1, 0x32, 0x7e, 0xd6, 0x65, 0xbf, 0x6c, 0xba, 0xc4, 0xe9, 0xd8, 0x7d, 0x0a, 0x03, 0xc5, 0x6e, 0xfc, 0xeb, 0x1c, 0x52, 0xd4, 0x9e, 0xd9, 0xc9, 0xc6]


```

# result[:32]
[0xf9, 0x71, 0x0c, 0x41, 0x56, 0x40, 0x33, 0xef, 0xcf, 0x83, 0xb0, 0x97, 0xe1, 0xe1, 0xb5, 0xf3, 0x40, 0xf3, 0x8c, 0x4f, 0xf4, 0x3e, 0x1a, 0x0b, 0xed, 0xaf, 0xcb, 0x77, 0xef, 0x0d, 0x7a, 0xf2]


# /dev/urandom => res = v6 ^ result[:32]
[0xe5, 0x56, 0xfc, 0xa4, 0x99, 0x23, 0x48, 0x2e, 0xfd, 0xfd, 0x66, 0xf2, 0x5e, 0x8d, 0xf, 0x37, 0xa9, 0x2b, 0xf1, 0x45, 0xf7, 0xfb, 0x74, 0xf7, 0x6, 0xb3, 0x99, 0xa3, 0x71, 0xd4, 0xb3, 0x34]

```
e5 56 fc a4 99 23 48 2e fd fd 66 f2 5e 8d 0f 37
a9 2b f1 45 f7 fb 74 f7 06 b3 99 a3 71 d4 b3 34
```

-----------------------------------------------------

# stack


```
v7 = []
a1, a2 = 0, 0
for i in range(32):
	a1 = (a1 + 1) % 256
	a2 = (a2 + x[a1]) % 256
	# switch_pos
	v3 = x[a1]
	x[a1] = x[a2]
	x[a2] = v3
	v7.append(x[a1] + x[a2])
```
# fixed value get from debugging
v7 = [0x26, 0x1f, 0x28, 0xfd, 0xf2, 0x90, 0x77, 0x34, 0x83, 0xb9, 0x18, 0x0a, 0xb4, 0x1b, 0x97, 0x4d, 0xe2, 0x39, 0x7b, 0x9e, 0x30, 0xb2, 0x66, 0xe5, 0x60, 0x37, 0xa1, 0xb7, 0x26, 0xae, 0x37, 0xd0, 0x0b, 0xe1, 0x21, 0x0c, 0xf8]

[0x26, 0x1f, 0x28, 0xfd, 0xf2, 0x90, 0x77, 0x34, 0x83, 0xb9, 0x18, 0xa, 0xb4, 0x1b, 0x97, 0x4d, 0xe2, 0x39, 0x7b, 0x9e, 0x30, 0xb2, 0x66, 0xe5, 0x60, 0x37, 0xa1, 0xb7, 0x26, 0xae, 0x37, 0xd0]

# flag_result[32:]
[0x65, 0x55, 0x1a, 0xcd, 0xc0, 0xa0, 0x0c, 0x59, 0xe2, 0xd4, 0x76, 0x7e, 0xd5, 0x6b, 0xc8, 0x2a, 0x83, 0x57, 0x24, 0xfd, 0x07, 0x83, 0x05, 0xd1, 0x51, 0x01, 0x92, 0x81, 0x1f, 0xcc, 0x55, 0xe6, 0x39, 0xd2, 0x11, 0x71, 0xf2]

-------------

>>> val = [0x26, 0x1f, 0x28, 0xfd, 0xf2, 0x90, 0x77, 0x34, 0x83, 0xb9, 0x18, 0x0a, 0xb4, 0x1b, 0x97, 0x4d, 0xe2, 0x39, 0x7b, 0x9e, 0x30, 0xb2, 0x66, 0xe5, 0x60, 0x37, 0xa1, 0xb7, 0x26, 0xae, 0x37, 0xd0, 0x0b, 0xe1, 0x21, 0x0c, 0xf8]
>>> 
>>> enc = [0x65, 0x55, 0x1a, 0xcd, 0xc0, 0xa0, 0x0c, 0x59, 0xe2, 0xd4, 0x76, 0x7e, 0xd5, 0x6b, 0xc8, 0x2a, 0x83, 0x57, 0x24, 0xfd, 0x07, 0x83, 0x05, 0xd1, 0x51, 0x01, 0x92, 0x81, 0x1f, 0xcc, 0x55, 0xe6, 0x39, 0xd2, 0x11, 0x71, 0xf2]
>>> 
>>> flag = ''.join(chr(i^j) for i,j in zip(val,enc))
>>> flag
'CJ2020{mamntap_gan_c71c416369bb6230}\n'